// import Client from 'zapi_jwt';
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

exports['default'] = function () {
    return {

        reportTaskStart: function reportTaskStart(startTime, userAgents, testCount) {
            this.startTime = startTime;
            this.testCount = testCount;

            this.write('Running tests in: ' + userAgents).newline();
        },

        reportFixtureStart: function reportFixtureStart(name) {
            this.newline().currentFixtureName = name;
            this.write('' + this.currentFixtureName).newline();
        },

        reportTestDone: function reportTestDone(name, testData) {
            var _this = this;

            var hasErr = !!testData.errs.length;

            var result = hasErr ? '✖' : '✓';

            var title = this.indentString(result + ' ' + name.split('!')[0], 4);

            if (hasErr) {
                this.write(this.chalk.red('' + title)).newline();
                testData.errs.forEach(function (err, idx) {
                    _this.newline().write(_this.formatError(err, _this.chalk.red(idx + 1 + ') '))).newline();
                });
            } else {
                this.write(this.chalk.green('' + title)).newline();
            }

            // API calls
            try {
                if (!!name.split('!')[1] && !!name.split('#')[1] && !!name.split('@')[1]) {
                    (function () {
                        var Client = require('./zapi_jwt.js');
                        var request = require('request-promise');
                        var JwtClient = new Client(process.env.ZEPHYR_BASE_URL, process.env.ZEPHYR_ACCESS_KEY, process.env.ZEPHYR_SECRET_KEY, process.env.ZEPHYR_USER);

                        var cicleVersionName = name.split('!')[1].split(' ')[0];
                        var issueId = name.split('#')[1].split(' ')[0];
                        var testCycleName = name.split('@')[1];
                        var testStatus = hasErr ? 2 : 1;

                        var METHOD_GET = 'GET';
                        var API_URI_GET = process.env.ZEPHYR_BASE_URL + '/public/rest/api/1.0/executions?issueId=' + issueId + '&projectId=' + process.env.ZEPHYR_QA_PROJECT_NUMBER;
                        var JWT_EXPIRE_GET = 3600;
                        var tokenGet = JwtClient.generateJWT(METHOD_GET, API_URI_GET, JWT_EXPIRE_GET);

                        var optionsGet = {

                            method: METHOD_GET,

                            url: API_URI_GET,

                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': 'JWT ' + tokenGet,
                                'zapiAccessKey': process.env.ZEPHYR_ACCESS_KEY
                            }
                        };

                        request(optionsGet).then(function (apires) {
                            var executions = JSON.parse(apires).executions;

                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;

                            try {
                                for (var _iterator = executions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var exec = _step.value;

                                    if (exec.execution.cycleName.includes(testCycleName) && exec.versionName.localeCompare(cicleVersionName) === 0) {
                                        var executionId = exec.execution.id;
                                        var cycleId = exec.execution.cycleId;
                                        var versionId = exec.execution.versionId;

                                        var METHOD_PUT = 'PUT';
                                        var API_URI_PUT = process.env.ZEPHYR_BASE_URL + '/public/rest/api/1.0/execution/' + executionId;
                                        var JWT_EXPIRE_PUT = 3600;
                                        var tokenPut = JwtClient.generateJWT(METHOD_PUT, API_URI_PUT, JWT_EXPIRE_PUT);

                                        var optionsPut = {
                                            method: METHOD_PUT,

                                            url: API_URI_PUT,

                                            headers: {
                                                'Content-Type': 'application/json',
                                                'Authorization': 'JWT ' + tokenPut,
                                                'zapiAccessKey': process.env.ZEPHYR_ACCESS_KEY
                                            },

                                            body: {
                                                'status': { 'id': testStatus },

                                                'projectId': process.env.ZEPHYR_QA_PROJECT_NUMBER,

                                                'issueId': issueId,

                                                'cycleId': cycleId,

                                                'versionId': versionId,

                                                'comment': 'Updated by Zapi Automation',

                                                'assigneeType': 'currentUser'
                                            },

                                            json: true
                                        };

                                        request(optionsPut);
                                    }
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator['return']) {
                                        _iterator['return']();
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        });
                    })();
                }
            } catch (err) {
                console.log(err);
            }
        },

        reportTaskDone: function reportTaskDone(endTime, passed) {
            var durationMs = endTime - this.startTime;
            var durationStr = this.moment.duration(durationMs).format('h[h] mm[m] ss[s]');
            var footer = passed === this.testCount ? this.testCount + ' passed' : this.testCount - passed + '/' + this.testCount + ' failed';

            footer += ' (Duration: ' + durationStr + ')';

            this.write(footer).newline();
        }
    };
};

module.exports = exports['default'];