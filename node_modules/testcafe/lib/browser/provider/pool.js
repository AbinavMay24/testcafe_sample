'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _builtIn = require('./built-in');

var _builtIn2 = _interopRequireDefault(_builtIn);

var _pluginHost = require('./plugin-host');

var _pluginHost2 = _interopRequireDefault(_pluginHost);

var _parseProviderName = require('./parse-provider-name');

var _parseProviderName2 = _interopRequireDefault(_parseProviderName);

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _connection = require('../connection');

var _connection2 = _interopRequireDefault(_connection);

var _runtime = require('../../errors/runtime');

var _message = require('../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BROWSER_PROVIDER_RE = /^([^:\s]+):?(.*)?$/;

exports.default = {
    providersCache: {},

    _handlePathAndCmd(alias) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const browserName = (0, _stringify2.default)(alias);
            const providerName = 'path';
            const provider = yield _this.getProvider(providerName);

            return { provider, providerName, browserName };
        })();
    },

    _parseAliasString(alias) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const providerRegExpMatch = BROWSER_PROVIDER_RE.exec(alias);

            if (!providerRegExpMatch) throw new _runtime.GeneralError(_message2.default.cantFindBrowser, alias);

            let providerName = providerRegExpMatch[1];
            let browserName = providerRegExpMatch[2] || '';

            let provider = yield _this2.getProvider(providerName);

            if (!provider && providerRegExpMatch[2]) provider = yield _this2.getProvider(providerName + ':');

            if (!provider) {
                providerName = 'locally-installed';
                provider = yield _this2.getProvider(providerName);
                browserName = providerRegExpMatch[1] || '';
            }

            return { provider, providerName, browserName };
        })();
    },

    _parseAlias(alias) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (alias && alias.path) return _this3._handlePathAndCmd(alias);

            if (typeof alias === 'string') return _this3._parseAliasString(alias);

            throw new _runtime.GeneralError(_message2.default.cantFindBrowser, alias);
        })();
    },

    _getInfoForAllBrowserNames(provider, providerName) {
        return (0, _asyncToGenerator3.default)(function* () {
            const allBrowserNames = provider.isMultiBrowser ? yield provider.getBrowserList() : [];

            if (!allBrowserNames.length) return { provider, providerName, browserName: '' };

            return allBrowserNames.map(function (browserName) {
                return { provider, providerName, browserName };
            });
        })();
    },

    _getProviderModule(providerName, moduleName) {
        try {
            const providerObject = require(moduleName);

            this.addProvider(providerName, providerObject);
            return this._getProviderFromCache(providerName);
        } catch (e) {
            return null;
        }
    },

    _getProviderFromCache(providerName) {
        return this.providersCache[providerName] || null;
    },

    _getBuiltinProvider(providerName) {
        const providerObject = _builtIn2.default[providerName];

        if (!providerObject) return null;

        this.addProvider(providerName, providerObject);

        return this._getProviderFromCache(providerName);
    },

    getBrowserInfo(alias) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (alias instanceof _connection2.default) return alias;

            const browserInfo = yield _this4._parseAlias(alias);

            const provider = browserInfo.provider,
                  providerName = browserInfo.providerName,
                  browserName = browserInfo.browserName;


            if (browserName === 'all') return yield _this4._getInfoForAllBrowserNames(provider, providerName);

            if (!(yield provider.isValidBrowserName(browserName))) throw new _runtime.GeneralError(_message2.default.cantFindBrowser, alias);

            return (0, _extends3.default)({ alias }, browserInfo);
        })();
    },

    addProvider(providerName, providerObject) {
        providerName = (0, _parseProviderName2.default)(providerName).providerName;

        this.providersCache[providerName] = new _2.default(new _pluginHost2.default(providerObject, providerName));
    },

    removeProvider(providerName) {
        providerName = (0, _parseProviderName2.default)(providerName).providerName;

        delete this.providersCache[providerName];
    },

    getProvider(providerName) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const parsedProviderName = (0, _parseProviderName2.default)(providerName);
            const moduleName = parsedProviderName.moduleName;

            providerName = parsedProviderName.providerName;

            const provider = _this5._getProviderFromCache(providerName) || _this5._getProviderModule(providerName, moduleName) || _this5._getBuiltinProvider(providerName);

            if (provider) yield _this5.providersCache[providerName].init();

            return provider;
        })();
    },

    dispose() {
        return _pinkie2.default.all((0, _values2.default)(this.providersCache).map(item => item.dispose()));
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
