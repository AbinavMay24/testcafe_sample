'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _promisifiedFunctions = require('../utils/promisified-functions');

var _option = require('./option');

var _option2 = _interopRequireDefault(_option);

var _optionSource = require('./option-source');

var _optionSource2 = _interopRequireDefault(_optionSource);

var _lodash = require('lodash');

var _getOptions = require('../utils/get-options');

var _optionNames = require('./option-names');

var _optionNames2 = _interopRequireDefault(_optionNames);

var _getFilterFn = require('../utils/get-filter-fn');

var _getFilterFn2 = _interopRequireDefault(_getFilterFn);

var _resolvePathRelativelyCwd = require('../utils/resolve-path-relatively-cwd');

var _resolvePathRelativelyCwd2 = _interopRequireDefault(_resolvePathRelativelyCwd);

var _json = require('json5');

var _json2 = _interopRequireDefault(_json);

var _renderTemplate = require('../utils/render-template');

var _renderTemplate2 = _interopRequireDefault(_renderTemplate);

var _prepareReporters = require('../utils/prepare-reporters');

var _prepareReporters2 = _interopRequireDefault(_prepareReporters);

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _log = require('../cli/log');

var _log2 = _interopRequireDefault(_log);

var _defaultValues = require('./default-values');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:configuration');

const CONFIGURATION_FILENAME = '.testcaferc.json';

const OPTION_FLAG_NAMES = [_optionNames2.default.skipJsErrors, _optionNames2.default.disablePageReloads, _optionNames2.default.quarantineMode, _optionNames2.default.debugMode, _optionNames2.default.debugOnFail, _optionNames2.default.skipUncaughtErrors, _optionNames2.default.stopOnFirstFail, _optionNames2.default.takeScreenshotsOnFails];

class Configuration {
    constructor() {
        this._options = {};
        this._filePath = (0, _resolvePathRelativelyCwd2.default)(CONFIGURATION_FILENAME);
        this._overridenOptions = [];
    }

    static _fromObj(obj) {
        const result = (0, _create2.default)(null);

        (0, _entries2.default)(obj).forEach(([key, value]) => {
            const option = new _option2.default(key, value);

            result[key] = option;
        });

        return result;
    }

    static _isConfigurationFileExists(path) {
        return (0, _asyncToGenerator3.default)(function* () {
            try {
                yield (0, _promisifiedFunctions.stat)(path);

                return true;
            } catch (error) {
                DEBUG_LOGGER((0, _renderTemplate2.default)(_warningMessage2.default.cannotFindConfigurationFile, path, error.stack));

                return false;
            }
        })();
    }

    static _showConsoleWarning(message) {
        _log2.default.write(message);
    }

    static _showWarningForError(error, warningTemplate, ...args) {
        const message = (0, _renderTemplate2.default)(warningTemplate, ...args);

        Configuration._showConsoleWarning(message);

        DEBUG_LOGGER(message);
        DEBUG_LOGGER(error);
    }

    _load() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!(yield Configuration._isConfigurationFileExists(_this.filePath))) return;

            let configurationFileContent = null;

            try {
                configurationFileContent = yield (0, _promisifiedFunctions.readFile)(_this.filePath);
            } catch (error) {
                Configuration._showWarningForError(error, _warningMessage2.default.cannotReadConfigFile);

                return;
            }

            try {
                const optionsObj = _json2.default.parse(configurationFileContent);

                _this._options = Configuration._fromObj(optionsObj);
            } catch (error) {
                Configuration._showWarningForError(error, _warningMessage2.default.cannotParseConfigFile);

                return;
            }

            yield _this._normalizeOptionsAfterLoad();
        })();
    }

    _normalizeOptionsAfterLoad() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this2._prepareSslOptions();
            _this2._prepareFilterFn();
            _this2._ensureArrayOption(_optionNames2.default.src);
            _this2._ensureArrayOption(_optionNames2.default.browsers);
            _this2._prepareReporters();
        })();
    }

    _ensureArrayOption(name) {
        const options = this._options[name];

        if (!options) return;

        options.value = (0, _lodash.castArray)(options.value);
    }

    _prepareFilterFn() {
        const filterOption = this._ensureOption(_optionNames2.default.filter, null);

        if (!filterOption.value) return;

        filterOption.value = (0, _getFilterFn2.default)(filterOption.value);
    }

    _prepareReporters() {
        const reporterOption = this._options[_optionNames2.default.reporter];

        if (!reporterOption) return;

        const optionValue = (0, _lodash.castArray)(reporterOption.value);

        reporterOption.value = (0, _prepareReporters2.default)(optionValue);
    }

    _prepareSslOptions() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const sslOptions = _this3._options[_optionNames2.default.ssl];

            if (!sslOptions) return;

            sslOptions.value = yield (0, _getOptions.getSSLOptions)(sslOptions.value);
        })();
    }

    _ensureOption(name, value, source) {
        let option = null;

        if (name in this._options) option = this._options[name];else {
            option = new _option2.default(name, value, source);

            this._options[name] = option;
        }

        return option;
    }

    _ensureOptionWithValue(name, defaultValue, source) {
        const option = this._ensureOption(name, defaultValue, source);

        if (option.value !== void 0) return;

        option.value = defaultValue;
        option.source = source;
    }

    init(options = {}) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this4._load();
            _this4.mergeOptions(options);
        })();
    }

    mergeOptions(options) {
        (0, _entries2.default)(options).map(([key, value]) => {
            const option = this._ensureOption(key, value, _optionSource2.default.input);

            if (value === void 0) return;

            if (option.value !== value && option.source === _optionSource2.default.configuration) this._overridenOptions.push(key);

            option.value = value;
            option.source = _optionSource2.default.input;
        });
    }

    _prepareFlags() {
        OPTION_FLAG_NAMES.forEach(name => {
            const option = this._ensureOption(name, void 0, _optionSource2.default.configuration);

            option.value = !!option.value;
        });
    }

    _setDefaultValues() {
        this._ensureOptionWithValue(_optionNames2.default.selectorTimeout, _defaultValues.DEFAULT_TIMEOUT.selector, _optionSource2.default.configuration);
        this._ensureOptionWithValue(_optionNames2.default.assertionTimeout, _defaultValues.DEFAULT_TIMEOUT.assertion, _optionSource2.default.configuration);
        this._ensureOptionWithValue(_optionNames2.default.pageLoadTimeout, _defaultValues.DEFAULT_TIMEOUT.pageLoad, _optionSource2.default.configuration);
        this._ensureOptionWithValue(_optionNames2.default.speed, _defaultValues.DEFAULT_SPEED_VALUE, _optionSource2.default.configuration);
        this._ensureOptionWithValue(_optionNames2.default.appInitDelay, _defaultValues.DEFAULT_APP_INIT_DELAY, _optionSource2.default.configuration);
        this._ensureOptionWithValue(_optionNames2.default.concurrency, _defaultValues.DEFAULT_CONCURRENCY_VALUE, _optionSource2.default.configuration);
    }

    prepare() {
        this._prepareFlags();
        this._setDefaultValues();
    }

    notifyAboutOverridenOptions() {
        if (!this._overridenOptions.length) return;

        const optionsStr = this._overridenOptions.map(option => `"${option}"`).join(', ');
        const optionsSuffix = this._overridenOptions.length > 1 ? 's' : '';

        Configuration._showConsoleWarning((0, _renderTemplate2.default)(_warningMessage2.default.configOptionsWereOverriden, optionsStr, optionsSuffix));

        this._overridenOptions = [];
    }

    getOption(key) {
        if (!key) return void 0;

        const option = this._options[key];

        if (!option) return void 0;

        return option.value;
    }

    getOptions() {
        const result = (0, _create2.default)(null);

        (0, _entries2.default)(this._options).forEach(([name, option]) => {
            result[name] = option.value;
        });

        return result;
    }

    clone() {
        return (0, _lodash.cloneDeep)(this);
    }

    get startOptions() {
        const result = {
            hostname: this.getOption('hostname'),
            port1: this.getOption('port1'),
            port2: this.getOption('port2'),
            options: {
                ssl: this.getOption('ssl'),
                developmentMode: this.getOption('developmentMode'),
                retryTestPages: !!this.getOption('retryTestPages')
            }
        };

        if (result.options.retryTestPages) result.options.staticContentCaching = _defaultValues.STATIC_CONTENT_CACHING_SETTINGS;

        return result;
    }

    get filePath() {
        return this._filePath;
    }
}
exports.default = Configuration;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
