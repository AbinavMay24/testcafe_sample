'use strict';

exports.__esModule = true;

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _fileWatcher = require('./file-watcher');

var _fileWatcher2 = _interopRequireDefault(_fileWatcher);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _process = require('process');

var _process2 = _interopRequireDefault(_process);

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const REQUIRED_MODULE_FOUND_EVENT = 'require-module-found';
const LOCK_KEY_PRESS_TIMEOUT = 1000;

class LiveModeController extends _events2.default {
    constructor(runner) {
        super();

        this.src = null;
        this.running = false;
        this.restarting = false;
        this.watchingPaused = false;
        this.stopping = false;
        this.logger = new _logger2.default();
        this.runner = runner;
        this.lockKeyPress = false;
        this.fileWatcher = null;
        this.rl = null;
    }

    init(files) {
        this._listenKeyPress();
        this._initFileWatching(files);
        this._listenTestRunnerEvents();
        this._setRunning();

        return _pinkie2.default.resolve().then(() => this.logger.writeIntroMessage(files));
    }

    dispose() {
        this.fileWatcher.stop();
        _process2.default.stdin.setRawMode(false);
        this.rl.close();
    }

    _toggleWatching() {
        this.watchingPaused = !this.watchingPaused;

        this.logger.writeToggleWatchingMessage(!this.watchingPaused);
    }

    _stop() {
        if (!this.runner || !this.running) {
            this.logger.writeNothingToStopMessage();

            return _pinkie2.default.resolve();
        }

        this.logger.writeStopRunningMessage();

        return this.runner.suspend().then(() => {
            this.restarting = false;
            this.running = false;
        });
    }

    _restart() {
        if (this.restarting || this.watchingPaused) return _pinkie2.default.resolve();

        this.restarting = true;

        if (this.running) {
            return this._stop().then(() => this.logger.writeTestsFinishedMessage()).then(() => this._runTests());
        }

        return this._runTests();
    }

    _exit() {
        if (this.stopping) return _pinkie2.default.resolve();

        this.logger.writeExitMessage();

        this.stopping = true;

        return this.runner ? this.runner.exit() : _pinkie2.default.resolve();
    }

    _createFileWatcher(src) {
        return new _fileWatcher2.default(src);
    }

    _listenKeyPress() {
        _readline2.default.emitKeypressEvents(_process2.default.stdin);
        if (_process2.default.stdin.isTTY) _process2.default.stdin.setRawMode(true);

        this.rl = _readline2.default.createInterface({
            input: _process2.default.stdin,
            output: _process2.default.stdout
        });

        _process2.default.stdin.on('keypress', (ch, key) => {
            if (this.lockKeyPress) return null;

            this.lockKeyPress = true;

            setTimeout(() => {
                this.lockKeyPress = false;
            }, LOCK_KEY_PRESS_TIMEOUT);

            if (key && key.ctrl) {
                switch (key.name) {
                    case 's':
                        return this._stop();
                    case 'r':
                        return this._restart();
                    case 'c':
                        return this._exit();
                    case 'w':
                        return this._toggleWatching();
                }
            }

            return null;
        });
    }

    _listenTestRunnerEvents() {
        this.runner.on(this.runner.TEST_RUN_DONE_EVENT, e => {
            this.running = false;

            if (!this.restarting) this.logger.writeTestsFinishedMessage();

            if (e.err) this.logger.err(`ERROR: ${e.err}`);
        });

        this.runner.on(this.runner.REQUIRED_MODULE_FOUND_EVENT, e => {
            this.emit(REQUIRED_MODULE_FOUND_EVENT, e);
        });
    }

    _initFileWatching(src) {
        this.fileWatcher = this._createFileWatcher(src);

        this.on(REQUIRED_MODULE_FOUND_EVENT, e => this.fileWatcher.addFile(e.filename));

        this.fileWatcher.on(this.fileWatcher.FILE_CHANGED_EVENT, () => this._runTests(true));
    }

    _setRunning() {
        this.running = true;
        this.restarting = false;
    }

    _runTests(sourceChanged) {
        if (this.watchingPaused || this.running) return _pinkie2.default.resolve();

        this._setRunning();

        this.logger.writeRunTestsMessage(sourceChanged);

        return this.runner.runTests();
    }
}

exports.default = LiveModeController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
