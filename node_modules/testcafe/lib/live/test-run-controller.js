'use strict';

exports.__esModule = true;

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _testRun = require('./test-run');

var _testRunState = require('./test-run-state');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LiveModeTestRunController extends _events2.default {
    constructor() {
        super();

        this.RUN_FINISHED_EVENT = 'run-finished-event';
        this.RUN_STOPPED_EVENT = 'run-stopped-event';

        this.testWrappers = [];
        this.expectedTestCount = 0;
        this._testRunCtor = null;
    }

    get TestRunCtor() {
        if (!this._testRunCtor) {
            this._testRunCtor = (0, _testRun.TestRunCtorFactory)({
                created: testRun => this._onTestRunCreated(testRun),
                started: testRun => this._onTestRunStarted(testRun),
                done: (testRun, forced) => this._onTestRunDone(testRun, forced),
                readyToNext: testRun => this._onTestRunReadyToNext(testRun)
            });
        }

        return this._testRunCtor;
    }

    setExpectedTestCount(testCount) {
        this.expectedTestCount = testCount;
    }

    run() {
        const readyToNextPromises = [];

        this.testWrappers.forEach(testWrapper => {
            testWrapper.testRuns.forEach(testRun => {
                if (testRun.finish) {
                    readyToNextPromises.push(testRun.readyToNextPromise);
                    testRun.finish();
                }
            });
        });

        this.testWrappers = [];

        return _pinkie2.default.all(readyToNextPromises);
    }

    stop() {
        const runningTestWrappers = this.testWrappers.filter(w => w.state === _testRunState.TEST_STATE.running);

        runningTestWrappers.forEach(testWrapper => {
            testWrapper.testRuns.forEach(testRun => testRun.stop());
        });
    }

    _getTestWrapper(test) {
        return this.testWrappers.find(w => w.test === test);
    }

    _onTestRunCreated(testRun) {
        let testWrapper = this._getTestWrapper(testRun.test);

        if (!testWrapper) {
            testWrapper = {
                test: testRun.test,
                state: _testRunState.TEST_STATE.created,
                testRuns: []
            };

            this.testWrappers.push(testWrapper);
        }

        testWrapper.testRuns.push(testRun);

        testRun.testWrapper = testWrapper;
    }

    _onTestRunStarted(testRun) {
        testRun.state = _testRunState.TEST_RUN_STATE.running;
        testRun.testWrapper.state = _testRunState.TEST_STATE.running;
    }

    _onTestRunDone(testRun, forced) {
        const testWrapper = testRun.testWrapper;

        testRun.state = _testRunState.TEST_RUN_STATE.waitingForDone;

        const waitingTestRunCount = testWrapper.testRuns.filter(w => w.state === _testRunState.TEST_RUN_STATE.created).length;
        const runningTestRunCount = testWrapper.testRuns.filter(w => w.state === _testRunState.TEST_RUN_STATE.running).length;

        const waitForOtherTestRuns = runningTestRunCount || waitingTestRunCount && !forced;

        if (!waitForOtherTestRuns) {
            testWrapper.state = _testRunState.TEST_STATE.done;

            //check other active tests
            setTimeout(() => {
                const hasTestsToRun = this.testWrappers.length < this.expectedTestCount || this.testWrappers.some(w => w.state === _testRunState.TEST_STATE.created) || testRun.quarantine && !testRun.quarantine.isThresholdReached();

                if (!forced && hasTestsToRun) testWrapper.testRuns.forEach(w => w.finish());else this.emit(forced ? this.RUN_STOPPED_EVENT : this.RUN_FINISHED_EVENT);
            }, 0);
        }

        testRun.readyToNextPromise = new _pinkie2.default(resolve => {
            testRun.setReadyToNext = resolve;
        });

        return new _pinkie2.default(resolve => {
            testRun.finish = () => {
                testRun.finish = null;
                testRun.state = _testRunState.TEST_RUN_STATE.done;
                resolve();
            };
        });
    }

    _onTestRunReadyToNext(testRun) {
        testRun.setReadyToNext();
    }
}

exports.default = LiveModeTestRunController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
