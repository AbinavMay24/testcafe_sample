'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _testRunController = require('./test-run-controller');

var _testRunController2 = _interopRequireDefault(_testRunController);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

var _runner = require('../runner');

var _runner2 = _interopRequireDefault(_runner);

var _bootstrapper = require('./bootstrapper');

var _bootstrapper2 = _interopRequireDefault(_bootstrapper);

var _parseFileList = require('../utils/parse-file-list');

var _parseFileList2 = _interopRequireDefault(_parseFileList);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LiveModeRunner extends _runner2.default {
    constructor(proxy, browserConnectionGateway, options) {
        super(proxy, browserConnectionGateway, options);

        /* EVENTS */
        this.TEST_RUN_DONE_EVENT = 'test-run-done';
        this.REQUIRED_MODULE_FOUND_EVENT = 'require-module-found';

        this.stopping = false;
        this.tcRunnerTaskPromise = null;
        this.stopInfiniteWaiting = _lodash.noop;
        this.preventRunCall = false;

        this.testRunController = new _testRunController2.default();

        this.embeddingOptions({
            TestRunCtor: this.testRunController.TestRunCtor,
            assets: []
        });

        this.controller = this._createController();
    }

    runTests(isFirstRun = false) {
        let runError = null;

        return this._finishPreviousTestRuns().then(() => {
            return this._validateRunnableConfiguration(isFirstRun);
        }).then(() => {
            this.testRunController.setExpectedTestCount(this.liveConfigurationCache.tests.filter(t => !t.skip).length);
        }).then(() => {
            this.tcRunnerTaskPromise = super.run(this.opts);

            return this.tcRunnerTaskPromise;
        }).catch(err => {
            this.setBootstrappingError(null);

            runError = err;
        }).then(() => {
            this.tcRunnerTaskPromise = null;

            this.emit(this.TEST_RUN_DONE_EVENT, { err: runError });
        });
    }

    _createRunnableConfiguration() {
        if (this.liveConfigurationCache) return _pinkie2.default.resolve(this.liveConfigurationCache);

        return super._createRunnableConfiguration().then(configuration => {
            this.liveConfigurationCache = configuration;

            return configuration;
        });
    }

    setBootstrappingError(err) {
        this.bootstrappingError = err;
    }

    run(options) {
        if (this.preventRunCall) throw new _runtime.GeneralError(_message2.default.cannotRunLiveModeRunnerMultipleTimes);

        this.preventRunCall = true;

        this.opts = (0, _assign2.default)({}, this.opts, options);

        this._setBootstrapperOptions();

        const fileListPromise = (0, _parseFileList2.default)(this.bootstrapper.sources, process.cwd());

        fileListPromise.then(files => this.controller.init(files)).then(() => this._createRunnableConfiguration()).then(() => this.runTests(true));

        return this._waitUntilExit().then(() => {
            if (this.liveConfigurationCache) {
                const browserSet = this.liveConfigurationCache.browserSet;


                if (browserSet) browserSet.browserConnections.forEach(bc => bc.forceIdle());
            }

            this.controller.dispose();
        }).then(() => {
            this.preventRunCall = false;
        });
    }

    suspend() {
        if (!this.tcRunnerTaskPromise) return _pinkie2.default.resolve();

        return new _pinkie2.default(resolve => {
            this.testRunController.once(this.testRunController.RUN_STOPPED_EVENT, () => {
                this.stopping = false;
                resolve();

                this.emit(this.TEST_RUN_DONE_EVENT, {});
            });

            this.stopping = true;
            this.testRunController.stop();
            this.tcRunnerTaskPromise.cancel();
        });
    }

    exit() {
        if (this.tcRunnerTaskPromise) this.tcRunnerTaskPromise.cancel();

        return _pinkie2.default.resolve().then(() => this.stopInfiniteWaiting());
    }

    _finishPreviousTestRuns() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this.liveConfigurationCache.tests) return;

            _this.testRunController.run();
        })();
    }

    _validateRunnableConfiguration(isFirstRun) {
        if (isFirstRun) {
            if (this.bootstrappingError) return _pinkie2.default.reject(this.bootstrappingError);

            return _pinkie2.default.resolve();
        }

        return this.bootstrapper._getTests().then(tests => {
            this.liveConfigurationCache.tests = tests;

            return this.bootstrappingError ? _pinkie2.default.reject(this.bootstrappingError) : _pinkie2.default.resolve();
        });
    }

    _createTask(tests, browserConnectionGroups, proxy, opts) {
        opts.live = true;

        return super._createTask(tests, browserConnectionGroups, proxy, opts);
    }

    _createBootstrapper(browserConnectionGateway) {
        return new _bootstrapper2.default(this, browserConnectionGateway);
    }

    _createController() {
        return new _controller2.default(this);
    }

    _waitUntilExit() {
        return new _pinkie2.default(resolve => {
            this.stopInfiniteWaiting = resolve;
        });
    }

    _disposeBrowserSet() {
        return _pinkie2.default.resolve();
    }
}

exports.default = LiveModeRunner;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
