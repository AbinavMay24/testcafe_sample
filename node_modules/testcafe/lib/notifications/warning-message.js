'use strict';

exports.__esModule = true;
exports.default = {
                       screenshotsPathNotSpecified: 'Was unable to take screenshots because the screenshot directory is not specified. To specify it, use the "-s" or "--screenshots" command line option or the "screenshots" method of the test runner in case you are using API.',
                       screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
                       screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
                       screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
                       browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
                       screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
                       videoNotSupportedByBrowser: 'Video recording is not supported by the "{browserAlias}" browser.',
                       resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
                       maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
                       resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
                       maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
                       requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
                       debugInHeadlessError: 'You cannot debug in headless mode.',
                       cannotReadConfigFile: 'An error has occurred while reading the configuration file.',
                       cannotParseConfigFile: "Failed to parse the '.testcaferc.json' file.\n\nThis file is not a well-formed JSON file.",
                       configOptionsWereOverriden: 'The {optionsString} option{suffix} from the configuration file will be ignored.',

                       cannotFindSSLCertFile: 'Unable to find the "{path}" file, specified by the "{option}" ssl option. Error details:\n' + '\n' + '{err}',

                       cannotFindConfigurationFile: 'Unable to find the "{path}" configuration file. Error details:\n' + '\n' + '{err}'
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZS5qcyJdLCJuYW1lcyI6WyJzY3JlZW5zaG90c1BhdGhOb3RTcGVjaWZpZWQiLCJzY3JlZW5zaG90RXJyb3IiLCJzY3JlZW5zaG90TWFya05vdEZvdW5kIiwic2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yIiwiYnJvd3Nlck1hbmlwdWxhdGlvbnNPblJlbW90ZUJyb3dzZXIiLCJzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXIiLCJ2aWRlb05vdFN1cHBvcnRlZEJ5QnJvd3NlciIsInJlc2l6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyIiwibWF4aW1pemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlciIsInJlc2l6ZUVycm9yIiwibWF4aW1pemVFcnJvciIsInJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQiLCJkZWJ1Z0luSGVhZGxlc3NFcnJvciIsImNhbm5vdFJlYWRDb25maWdGaWxlIiwiY2Fubm90UGFyc2VDb25maWdGaWxlIiwiY29uZmlnT3B0aW9uc1dlcmVPdmVycmlkZW4iLCJjYW5ub3RGaW5kU1NMQ2VydEZpbGUiLCJjYW5ub3RGaW5kQ29uZmlndXJhdGlvbkZpbGUiXSwibWFwcGluZ3MiOiI7OztrQkFBZTtBQUNYQSxvREFBeUMsZ09BRDlCO0FBRVhDLHdDQUF5QyxrRUFGOUI7QUFHWEMsK0NBQXlDLGtLQUg5QjtBQUlYQyxpREFBeUMsOFZBSjlCO0FBS1hDLDREQUF5QyxrTkFMOUI7QUFNWEMsZ0VBQXlDLHlGQU45QjtBQU9YQyxtREFBeUMsbUVBUDlCO0FBUVhDLDREQUF5Qyw0RkFSOUI7QUFTWEMsOERBQXlDLGtHQVQ5QjtBQVVYQyxvQ0FBeUMsa0VBVjlCO0FBV1hDLHNDQUF5QyxvRUFYOUI7QUFZWEMsd0RBQXlDLHNGQVo5QjtBQWFYQyw2Q0FBeUMsb0NBYjlCO0FBY1hDLDZDQUF5Qyw2REFkOUI7QUFlWEMsOENBQXlDLDJGQWY5QjtBQWdCWEMsbURBQXlDLGlGQWhCOUI7O0FBa0JYQyw4Q0FBdUIsK0ZBQ0EsSUFEQSxHQUVBLE9BcEJaOztBQXNCWEMsb0RBQTZCLHFFQUNBLElBREEsR0FFQTtBQXhCbEIsQyIsImZpbGUiOiJub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBzY3JlZW5zaG90c1BhdGhOb3RTcGVjaWZpZWQ6ICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHRha2Ugc2NyZWVuc2hvdHMgYmVjYXVzZSB0aGUgc2NyZWVuc2hvdCBkaXJlY3RvcnkgaXMgbm90IHNwZWNpZmllZC4gVG8gc3BlY2lmeSBpdCwgdXNlIHRoZSBcIi1zXCIgb3IgXCItLXNjcmVlbnNob3RzXCIgY29tbWFuZCBsaW5lIG9wdGlvbiBvciB0aGUgXCJzY3JlZW5zaG90c1wiIG1ldGhvZCBvZiB0aGUgdGVzdCBydW5uZXIgaW4gY2FzZSB5b3UgYXJlIHVzaW5nIEFQSS4nLFxuICAgIHNjcmVlbnNob3RFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gdGFrZSBhIHNjcmVlbnNob3QgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgc2NyZWVuc2hvdE1hcmtOb3RGb3VuZDogICAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGxvY2F0ZSB0aGUgcGFnZSBhcmVhIGluIHRoZSBicm93c2VyIHdpbmRvdyBzY3JlZW5zaG90IGF0IHtzY3JlZW5zaG90UGF0aH0sIGJlY2F1c2UgdGhlIHBhZ2UgYXJlYSBtYXJrIHdpdGggSUQge21hcmtJZH0gaXMgbm90IGZvdW5kIGluIHRoZSBzY3JlZW5zaG90LicsXG4gICAgc2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yOiAgICAgICAgICAgICAgICAnVGhlIGZpbGUgYXQgXCJ7c2NyZWVuc2hvdFBhdGh9XCIgYWxyZWFkeSBleGlzdHMuIEl0IGhhcyBqdXN0IGJlZW4gcmV3cml0dGVuIHdpdGggYSByZWNlbnQgc2NyZWVuc2hvdC4gVGhpcyBzaXR1YXRpb24gY2FuIHBvc3NpYmx5IGNhdXNlIGlzc3Vlcy4gVG8gYXZvaWQgdGhlbSwgbWFrZSBzdXJlIHRoYXQgZWFjaCBzY3JlZW5zaG90IGhhcyBhIHVuaXF1ZSBwYXRoLiBJZiBhIHRlc3QgcnVucyBpbiBtdWx0aXBsZSBicm93c2VycywgY29uc2lkZXIgaW5jbHVkaW5nIHRoZSB1c2VyIGFnZW50IGluIHRoZSBzY3JlZW5zaG90IHBhdGggb3IgZ2VuZXJhdGUgYSB1bmlxdWUgaWRlbnRpZmllciBpbiBhbm90aGVyIHdheS4nLFxuICAgIGJyb3dzZXJNYW5pcHVsYXRpb25zT25SZW1vdGVCcm93c2VyOiAgICAgJ1RoZSBzY3JlZW5zaG90IGFuZCB3aW5kb3cgcmVzaXplIGZ1bmN0aW9uYWxpdGllcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBhIHJlbW90ZSBicm93c2VyLiBUaGV5IGNhbiBmdW5jdGlvbiBvbmx5IGlmIHRoZSBicm93c2VyIGlzIHJ1bm5pbmcgb24gdGhlIHNhbWUgbWFjaGluZSBhbmQgaW4gdGhlIHNhbWUgZW52aXJvbm1lbnQgYXMgdGhlIFRlc3RDYWZlIHNlcnZlci4nLFxuICAgIHNjcmVlbnNob3ROb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogJ1RoZSBzY3JlZW5zaG90IGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICB2aWRlb05vdFN1cHBvcnRlZEJ5QnJvd3NlcjogICAgICAgICAgICAgICdWaWRlbyByZWNvcmRpbmcgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7YnJvd3NlckFsaWFzfVwiIGJyb3dzZXIuJyxcbiAgICByZXNpemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogICAgICdUaGUgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgbWF4aW1pemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogICAnVGhlIHdpbmRvdyBtYXhpbWl6YXRpb24gZnVuY3Rpb25hbGl0eSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBcIntwcm92aWRlck5hbWV9XCIgYnJvd3NlciBwcm92aWRlci4nLFxuICAgIHJlc2l6ZUVycm9yOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gcmVzaXplIHRoZSB3aW5kb3cgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgbWF4aW1pemVFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byBtYXhpbWl6ZSB0aGUgd2luZG93IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQ6ICAgICAgICAgJ3tSZXF1ZXN0SG9va306IENPUlMgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGEgcmVxdWVzdCBzcGVjaWZpZWQgYXMge3JlcXVlc3RGaWx0ZXJSdWxlfScsXG4gICAgZGVidWdJbkhlYWRsZXNzRXJyb3I6ICAgICAgICAgICAgICAgICAgICAnWW91IGNhbm5vdCBkZWJ1ZyBpbiBoZWFkbGVzcyBtb2RlLicsXG4gICAgY2Fubm90UmVhZENvbmZpZ0ZpbGU6ICAgICAgICAgICAgICAgICAgICAnQW4gZXJyb3IgaGFzIG9jY3VycmVkIHdoaWxlIHJlYWRpbmcgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS4nLFxuICAgIGNhbm5vdFBhcnNlQ29uZmlnRmlsZTogICAgICAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gcGFyc2UgdGhlICcudGVzdGNhZmVyYy5qc29uJyBmaWxlLlxcblxcblRoaXMgZmlsZSBpcyBub3QgYSB3ZWxsLWZvcm1lZCBKU09OIGZpbGUuXCIsXG4gICAgY29uZmlnT3B0aW9uc1dlcmVPdmVycmlkZW46ICAgICAgICAgICAgICAnVGhlIHtvcHRpb25zU3RyaW5nfSBvcHRpb257c3VmZml4fSBmcm9tIHRoZSBjb25maWd1cmF0aW9uIGZpbGUgd2lsbCBiZSBpZ25vcmVkLicsXG5cbiAgICBjYW5ub3RGaW5kU1NMQ2VydEZpbGU6ICdVbmFibGUgdG8gZmluZCB0aGUgXCJ7cGF0aH1cIiBmaWxlLCBzcGVjaWZpZWQgYnkgdGhlIFwie29wdGlvbn1cIiBzc2wgb3B0aW9uLiBFcnJvciBkZXRhaWxzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3tlcnJ9JyxcblxuICAgIGNhbm5vdEZpbmRDb25maWd1cmF0aW9uRmlsZTogJ1VuYWJsZSB0byBmaW5kIHRoZSBcIntwYXRofVwiIGNvbmZpZ3VyYXRpb24gZmlsZS4gRXJyb3IgZGV0YWlsczpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7ZXJyfSdcbn07XG4iXX0=
