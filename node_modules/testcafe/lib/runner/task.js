'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _asyncEventEmitter = require('../utils/async-event-emitter');

var _asyncEventEmitter2 = _interopRequireDefault(_asyncEventEmitter);

var _browserJob = require('./browser-job');

var _browserJob2 = _interopRequireDefault(_browserJob);

var _screenshots = require('../screenshots');

var _screenshots2 = _interopRequireDefault(_screenshots);

var _videoRecorder = require('../video-recorder');

var _videoRecorder2 = _interopRequireDefault(_videoRecorder);

var _warningLog = require('../notifications/warning-log');

var _warningLog2 = _interopRequireDefault(_warningLog);

var _fixtureHookController = require('./fixture-hook-controller');

var _fixtureHookController2 = _interopRequireDefault(_fixtureHookController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Task extends _asyncEventEmitter2.default {
    constructor(tests, browserConnectionGroups, proxy, opts) {
        super();

        this.timeStamp = (0, _moment2.default)();
        this.running = false;
        this.browserConnectionGroups = browserConnectionGroups;
        this.tests = tests;
        this.opts = opts;
        this.screenshots = new _screenshots2.default(this.opts.screenshotPath, this.opts.screenshotPathPattern);
        this.warningLog = new _warningLog2.default();

        this.fixtureHookController = new _fixtureHookController2.default(tests, browserConnectionGroups.length);
        this.pendingBrowserJobs = this._createBrowserJobs(proxy, this.opts);

        if (this.opts.videoPath) this.videoRecorders = this._createVideoRecorders(this.pendingBrowserJobs);
    }

    _assignBrowserJobEventHandlers(job) {
        var _this = this;

        job.on('test-run-start', testRun => this.emit('test-run-start', testRun));

        job.on('test-run-done', (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (testRun) {
                yield _this.emit('test-run-done', testRun);

                if (_this.opts.stopOnFirstFail && testRun.errs.length) {
                    _this.abort();
                    yield _this.emit('done');
                }
            });

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        })());

        job.once('start', (0, _asyncToGenerator3.default)(function* () {
            if (!_this.running) {
                _this.running = true;
                yield _this.emit('start');
            }
        }));

        job.once('done', (0, _asyncToGenerator3.default)(function* () {
            yield _this.emit('browser-job-done', job);

            (0, _lodash.pull)(_this.pendingBrowserJobs, job);

            if (!_this.pendingBrowserJobs.length) yield _this.emit('done');
        }));
    }

    _createBrowserJobs(proxy, opts) {
        return this.browserConnectionGroups.map(browserConnectionGroup => {
            const job = new _browserJob2.default(this.tests, browserConnectionGroup, proxy, this.screenshots, this.warningLog, this.fixtureHookController, opts);

            this._assignBrowserJobEventHandlers(job);
            browserConnectionGroup.map(bc => bc.addJob(job));

            return job;
        });
    }

    _createVideoRecorders(browserJobs) {
        const videoOptions = (0, _extends3.default)({ timeStamp: this.timeStamp }, this.opts.videoOptions);

        return browserJobs.map(browserJob => new _videoRecorder2.default(browserJob, this.opts.videoPath, videoOptions, this.opts.videoEncodingOptions));
    }

    // API
    abort() {
        this.pendingBrowserJobs.forEach(job => job.abort());
    }
}
exports.default = Task;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW5uZXIvdGFzay5qcyJdLCJuYW1lcyI6WyJUYXNrIiwiQXN5bmNFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsInRlc3RzIiwiYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMiLCJwcm94eSIsIm9wdHMiLCJ0aW1lU3RhbXAiLCJydW5uaW5nIiwic2NyZWVuc2hvdHMiLCJTY3JlZW5zaG90cyIsInNjcmVlbnNob3RQYXRoIiwic2NyZWVuc2hvdFBhdGhQYXR0ZXJuIiwid2FybmluZ0xvZyIsIldhcm5pbmdMb2ciLCJmaXh0dXJlSG9va0NvbnRyb2xsZXIiLCJGaXh0dXJlSG9va0NvbnRyb2xsZXIiLCJsZW5ndGgiLCJwZW5kaW5nQnJvd3NlckpvYnMiLCJfY3JlYXRlQnJvd3NlckpvYnMiLCJ2aWRlb1BhdGgiLCJ2aWRlb1JlY29yZGVycyIsIl9jcmVhdGVWaWRlb1JlY29yZGVycyIsIl9hc3NpZ25Ccm93c2VySm9iRXZlbnRIYW5kbGVycyIsImpvYiIsIm9uIiwidGVzdFJ1biIsImVtaXQiLCJzdG9wT25GaXJzdEZhaWwiLCJlcnJzIiwiYWJvcnQiLCJvbmNlIiwibWFwIiwiYnJvd3NlckNvbm5lY3Rpb25Hcm91cCIsIkJyb3dzZXJKb2IiLCJiYyIsImFkZEpvYiIsImJyb3dzZXJKb2JzIiwidmlkZW9PcHRpb25zIiwiYnJvd3NlckpvYiIsIlZpZGVvUmVjb3JkZXIiLCJ2aWRlb0VuY29kaW5nT3B0aW9ucyIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxJQUFOLFNBQW1CQywyQkFBbkIsQ0FBcUM7QUFDaERDLGdCQUFhQyxLQUFiLEVBQW9CQyx1QkFBcEIsRUFBNkNDLEtBQTdDLEVBQW9EQyxJQUFwRCxFQUEwRDtBQUN0RDs7QUFFQSxhQUFLQyxTQUFMLEdBQStCLHVCQUEvQjtBQUNB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QUFLakMsSUFBTCxDQUFVYyxTQUF4QyxFQUFtRGtCLFlBQW5ELEVBQWlFLEtBQUtoQyxJQUFMLENBQVVtQyxvQkFBM0UsQ0FBOUIsQ0FBUDtBQUNIOztBQUVEO0FBQ0FYLFlBQVM7QUFDTCxhQUFLWixrQkFBTCxDQUF3QndCLE9BQXhCLENBQWdDbEIsT0FBT0EsSUFBSU0sS0FBSixFQUF2QztBQUNIO0FBcEUrQztrQkFBL0I5QixJIiwiZmlsZSI6InJ1bm5lci90YXNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHVsbCBhcyByZW1vdmUgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IEFzeW5jRXZlbnRFbWl0dGVyIGZyb20gJy4uL3V0aWxzL2FzeW5jLWV2ZW50LWVtaXR0ZXInO1xuaW1wb3J0IEJyb3dzZXJKb2IgZnJvbSAnLi9icm93c2VyLWpvYic7XG5pbXBvcnQgU2NyZWVuc2hvdHMgZnJvbSAnLi4vc2NyZWVuc2hvdHMnO1xuaW1wb3J0IFZpZGVvUmVjb3JkZXIgZnJvbSAnLi4vdmlkZW8tcmVjb3JkZXInO1xuaW1wb3J0IFdhcm5pbmdMb2cgZnJvbSAnLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLWxvZyc7XG5pbXBvcnQgRml4dHVyZUhvb2tDb250cm9sbGVyIGZyb20gJy4vZml4dHVyZS1ob29rLWNvbnRyb2xsZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrIGV4dGVuZHMgQXN5bmNFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yICh0ZXN0cywgYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMsIHByb3h5LCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy50aW1lU3RhbXAgICAgICAgICAgICAgICA9IG1vbWVudCgpO1xuICAgICAgICB0aGlzLnJ1bm5pbmcgICAgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMgPSBicm93c2VyQ29ubmVjdGlvbkdyb3VwcztcbiAgICAgICAgdGhpcy50ZXN0cyAgICAgICAgICAgICAgICAgICA9IHRlc3RzO1xuICAgICAgICB0aGlzLm9wdHMgICAgICAgICAgICAgICAgICAgID0gb3B0cztcbiAgICAgICAgdGhpcy5zY3JlZW5zaG90cyAgICAgICAgICAgICA9IG5ldyBTY3JlZW5zaG90cyh0aGlzLm9wdHMuc2NyZWVuc2hvdFBhdGgsIHRoaXMub3B0cy5zY3JlZW5zaG90UGF0aFBhdHRlcm4pO1xuICAgICAgICB0aGlzLndhcm5pbmdMb2cgICAgICAgICAgICAgID0gbmV3IFdhcm5pbmdMb2coKTtcblxuICAgICAgICB0aGlzLmZpeHR1cmVIb29rQ29udHJvbGxlciA9IG5ldyBGaXh0dXJlSG9va0NvbnRyb2xsZXIodGVzdHMsIGJyb3dzZXJDb25uZWN0aW9uR3JvdXBzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMucGVuZGluZ0Jyb3dzZXJKb2JzICAgID0gdGhpcy5fY3JlYXRlQnJvd3NlckpvYnMocHJveHksIHRoaXMub3B0cyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0cy52aWRlb1BhdGgpXG4gICAgICAgICAgICB0aGlzLnZpZGVvUmVjb3JkZXJzID0gdGhpcy5fY3JlYXRlVmlkZW9SZWNvcmRlcnModGhpcy5wZW5kaW5nQnJvd3NlckpvYnMpO1xuICAgIH1cblxuICAgIF9hc3NpZ25Ccm93c2VySm9iRXZlbnRIYW5kbGVycyAoam9iKSB7XG4gICAgICAgIGpvYi5vbigndGVzdC1ydW4tc3RhcnQnLCB0ZXN0UnVuID0+IHRoaXMuZW1pdCgndGVzdC1ydW4tc3RhcnQnLCB0ZXN0UnVuKSk7XG5cbiAgICAgICAgam9iLm9uKCd0ZXN0LXJ1bi1kb25lJywgYXN5bmMgdGVzdFJ1biA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVtaXQoJ3Rlc3QtcnVuLWRvbmUnLCB0ZXN0UnVuKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5zdG9wT25GaXJzdEZhaWwgJiYgdGVzdFJ1bi5lcnJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVtaXQoJ2RvbmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgam9iLm9uY2UoJ3N0YXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdCgnc3RhcnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgam9iLm9uY2UoJ2RvbmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVtaXQoJ2Jyb3dzZXItam9iLWRvbmUnLCBqb2IpO1xuXG4gICAgICAgICAgICByZW1vdmUodGhpcy5wZW5kaW5nQnJvd3NlckpvYnMsIGpvYik7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5wZW5kaW5nQnJvd3NlckpvYnMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdCgnZG9uZScpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQnJvd3NlckpvYnMgKHByb3h5LCBvcHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyb3dzZXJDb25uZWN0aW9uR3JvdXBzLm1hcChicm93c2VyQ29ubmVjdGlvbkdyb3VwID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGpvYiA9IG5ldyBCcm93c2VySm9iKHRoaXMudGVzdHMsIGJyb3dzZXJDb25uZWN0aW9uR3JvdXAsIHByb3h5LCB0aGlzLnNjcmVlbnNob3RzLCB0aGlzLndhcm5pbmdMb2csIHRoaXMuZml4dHVyZUhvb2tDb250cm9sbGVyLCBvcHRzKTtcblxuICAgICAgICAgICAgdGhpcy5fYXNzaWduQnJvd3NlckpvYkV2ZW50SGFuZGxlcnMoam9iKTtcbiAgICAgICAgICAgIGJyb3dzZXJDb25uZWN0aW9uR3JvdXAubWFwKGJjID0+IGJjLmFkZEpvYihqb2IpKTtcblxuICAgICAgICAgICAgcmV0dXJuIGpvYjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVZpZGVvUmVjb3JkZXJzIChicm93c2VySm9icykge1xuICAgICAgICBjb25zdCB2aWRlb09wdGlvbnMgPSB7IHRpbWVTdGFtcDogdGhpcy50aW1lU3RhbXAsIC4uLnRoaXMub3B0cy52aWRlb09wdGlvbnMgfTtcblxuICAgICAgICByZXR1cm4gYnJvd3NlckpvYnMubWFwKGJyb3dzZXJKb2IgPT4gbmV3IFZpZGVvUmVjb3JkZXIoYnJvd3NlckpvYiwgdGhpcy5vcHRzLnZpZGVvUGF0aCwgdmlkZW9PcHRpb25zLCB0aGlzLm9wdHMudmlkZW9FbmNvZGluZ09wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvLyBBUElcbiAgICBhYm9ydCAoKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ0Jyb3dzZXJKb2JzLmZvckVhY2goam9iID0+IGpvYi5hYm9ydCgpKTtcbiAgICB9XG59XG4iXX0=
