'use strict';

exports.__esModule = true;

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _convertToBestFitType = require('../convert-to-best-fit-type');

var _convertToBestFitType2 = _interopRequireDefault(_convertToBestFitType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_OPTIONS_SEPARATOR = ',';
const DEFAULT_KEY_VALUE_SEPARATOR = '=';

const DEFAULT_ON_OPTION_PARSED = (key, value) => value;

function parseOptionsString(optionsStr, optionsSeparator, keyValueSeparator) {
    return optionsStr.split(optionsSeparator).map(keyValueString => keyValueString.split(keyValueSeparator)).map(([key, ...value]) => [key, value.length > 1 ? value.join(keyValueSeparator) : value[0]]);
}

exports.default = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (sourceOptions = '', optionsConfig) {
        var _optionsConfig$option = optionsConfig.optionsSeparator;
        const optionsSeparator = _optionsConfig$option === undefined ? DEFAULT_OPTIONS_SEPARATOR : _optionsConfig$option;
        var _optionsConfig$keyVal = optionsConfig.keyValueSeparator;
        const keyValueSeparator = _optionsConfig$keyVal === undefined ? DEFAULT_KEY_VALUE_SEPARATOR : _optionsConfig$keyVal;
        var _optionsConfig$onOpti = optionsConfig.onOptionParsed;
        const onOptionParsed = _optionsConfig$onOpti === undefined ? DEFAULT_ON_OPTION_PARSED : _optionsConfig$onOpti;


        const optionsList = typeof sourceOptions === 'string' ? parseOptionsString(sourceOptions, optionsSeparator, keyValueSeparator) : (0, _entries2.default)(sourceOptions);

        const resultOptions = {};

        yield _pinkie2.default.all(optionsList.map((() => {
            var _ref2 = (0, _asyncToGenerator3.default)(function* ([key, value]) {
                // NOTE: threat a key without a separator and a value as a boolean flag
                if (value === void 0) value = true;

                value = (0, _convertToBestFitType2.default)(value);

                resultOptions[key] = yield onOptionParsed(key, value);
            });

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        })()));

        return resultOptions;
    });

    return function () {
        return _ref.apply(this, arguments);
    };
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9nZXQtb3B0aW9ucy9iYXNlLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfT1BUSU9OU19TRVBBUkFUT1IiLCJERUZBVUxUX0tFWV9WQUxVRV9TRVBBUkFUT1IiLCJERUZBVUxUX09OX09QVElPTl9QQVJTRUQiLCJrZXkiLCJ2YWx1ZSIsInBhcnNlT3B0aW9uc1N0cmluZyIsIm9wdGlvbnNTdHIiLCJvcHRpb25zU2VwYXJhdG9yIiwia2V5VmFsdWVTZXBhcmF0b3IiLCJzcGxpdCIsIm1hcCIsImtleVZhbHVlU3RyaW5nIiwibGVuZ3RoIiwiam9pbiIsInNvdXJjZU9wdGlvbnMiLCJvcHRpb25zQ29uZmlnIiwib25PcHRpb25QYXJzZWQiLCJvcHRpb25zTGlzdCIsInJlc3VsdE9wdGlvbnMiLCJQcm9taXNlIiwiYWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFHQSxNQUFNQSw0QkFBOEIsR0FBcEM7QUFDQSxNQUFNQyw4QkFBOEIsR0FBcEM7O0FBRUEsTUFBTUMsMkJBQTJCLENBQUNDLEdBQUQsRUFBTUMsS0FBTixLQUFnQkEsS0FBakQ7O0FBRUEsU0FBU0Msa0JBQVQsQ0FBNkJDLFVBQTdCLEVBQXlDQyxnQkFBekMsRUFBMkRDLGlCQUEzRCxFQUE4RTtBQUMxRSxXQUFPRixXQUNGRyxLQURFLENBQ0lGLGdCQURKLEVBRUZHLEdBRkUsQ0FFRUMsa0JBQWtCQSxlQUFlRixLQUFmLENBQXFCRCxpQkFBckIsQ0FGcEIsRUFHRkUsR0FIRSxDQUdFLENBQUMsQ0FBQ1AsR0FBRCxFQUFNLEdBQUdDLEtBQVQsQ0FBRCxLQUFxQixDQUFDRCxHQUFELEVBQU1DLE1BQU1RLE1BQU4sR0FBZSxDQUFmLEdBQW1CUixNQUFNUyxJQUFOLENBQVdMLGlCQUFYLENBQW5CLEdBQW1ESixNQUFNLENBQU4sQ0FBekQsQ0FIdkIsQ0FBUDtBQUlIOzs7K0NBRWMsV0FBZ0JVLGdCQUFnQixFQUFoQyxFQUFvQ0MsYUFBcEMsRUFBbUQ7QUFBQSxvQ0FLMURBLGFBTDBELENBRTFEUixnQkFGMEQ7QUFBQSxjQUUxREEsZ0JBRjBELHlDQUV2Q1AseUJBRnVDO0FBQUEsb0NBSzFEZSxhQUwwRCxDQUcxRFAsaUJBSDBEO0FBQUEsY0FHMURBLGlCQUgwRCx5Q0FHdENQLDJCQUhzQztBQUFBLG9DQUsxRGMsYUFMMEQsQ0FJMURDLGNBSjBEO0FBQUEsY0FJMURBLGNBSjBELHlDQUl6Q2Qsd0JBSnlDOzs7QUFPOUQsY0FBTWUsY0FBYyxPQUFPSCxhQUFQLEtBQXlCLFFBQXpCLEdBQ2hCVCxtQkFBbUJTLGFBQW5CLEVBQWtDUCxnQkFBbEMsRUFBb0RDLGlCQUFwRCxDQURnQixHQUVoQix1QkFBZU0sYUFBZixDQUZKOztBQUlBLGNBQU1JLGdCQUFnQixFQUF0Qjs7QUFFQSxjQUFNQyxpQkFBUUMsR0FBUixDQUFZSCxZQUFZUCxHQUFaO0FBQUEsd0RBQWdCLFdBQU8sQ0FBQ1AsR0FBRCxFQUFNQyxLQUFOLENBQVAsRUFBd0I7QUFDdEQ7QUFDQSxvQkFBSUEsVUFBVSxLQUFLLENBQW5CLEVBQ0lBLFFBQVEsSUFBUjs7QUFFSkEsd0JBQVEsb0NBQXFCQSxLQUFyQixDQUFSOztBQUVBYyw4QkFBY2YsR0FBZCxJQUFxQixNQUFNYSxlQUFlYixHQUFmLEVBQW9CQyxLQUFwQixDQUEzQjtBQUNILGFBUmlCOztBQUFBO0FBQUE7QUFBQTtBQUFBLGFBQVosQ0FBTjs7QUFVQSxlQUFPYyxhQUFQO0FBQ0gsSyIsImZpbGUiOiJ1dGlscy9nZXQtb3B0aW9ucy9iYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2UgZnJvbSAncGlua2llJztcbmltcG9ydCBjb252ZXJ0VG9CZXN0Rml0VHlwZSBmcm9tICcuLi9jb252ZXJ0LXRvLWJlc3QtZml0LXR5cGUnO1xuXG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OU19TRVBBUkFUT1IgICA9ICcsJztcbmNvbnN0IERFRkFVTFRfS0VZX1ZBTFVFX1NFUEFSQVRPUiA9ICc9JztcblxuY29uc3QgREVGQVVMVF9PTl9PUFRJT05fUEFSU0VEID0gKGtleSwgdmFsdWUpID0+IHZhbHVlO1xuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnNTdHJpbmcgKG9wdGlvbnNTdHIsIG9wdGlvbnNTZXBhcmF0b3IsIGtleVZhbHVlU2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG9wdGlvbnNTdHJcbiAgICAgICAgLnNwbGl0KG9wdGlvbnNTZXBhcmF0b3IpXG4gICAgICAgIC5tYXAoa2V5VmFsdWVTdHJpbmcgPT4ga2V5VmFsdWVTdHJpbmcuc3BsaXQoa2V5VmFsdWVTZXBhcmF0b3IpKVxuICAgICAgICAubWFwKChba2V5LCAuLi52YWx1ZV0pID0+IFtrZXksIHZhbHVlLmxlbmd0aCA+IDEgPyB2YWx1ZS5qb2luKGtleVZhbHVlU2VwYXJhdG9yKSA6IHZhbHVlWzBdXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChzb3VyY2VPcHRpb25zID0gJycsIG9wdGlvbnNDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIG9wdGlvbnNTZXBhcmF0b3IgPSBERUZBVUxUX09QVElPTlNfU0VQQVJBVE9SLFxuICAgICAgICBrZXlWYWx1ZVNlcGFyYXRvciA9IERFRkFVTFRfS0VZX1ZBTFVFX1NFUEFSQVRPUixcbiAgICAgICAgb25PcHRpb25QYXJzZWQgPSBERUZBVUxUX09OX09QVElPTl9QQVJTRURcbiAgICB9ID0gb3B0aW9uc0NvbmZpZztcblxuICAgIGNvbnN0IG9wdGlvbnNMaXN0ID0gdHlwZW9mIHNvdXJjZU9wdGlvbnMgPT09ICdzdHJpbmcnID9cbiAgICAgICAgcGFyc2VPcHRpb25zU3RyaW5nKHNvdXJjZU9wdGlvbnMsIG9wdGlvbnNTZXBhcmF0b3IsIGtleVZhbHVlU2VwYXJhdG9yKSA6XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHNvdXJjZU9wdGlvbnMpO1xuXG4gICAgY29uc3QgcmVzdWx0T3B0aW9ucyA9IHt9O1xuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwob3B0aW9uc0xpc3QubWFwKGFzeW5jIChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgLy8gTk9URTogdGhyZWF0IGEga2V5IHdpdGhvdXQgYSBzZXBhcmF0b3IgYW5kIGEgdmFsdWUgYXMgYSBib29sZWFuIGZsYWdcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApXG4gICAgICAgICAgICB2YWx1ZSA9IHRydWU7XG5cbiAgICAgICAgdmFsdWUgPSBjb252ZXJ0VG9CZXN0Rml0VHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgcmVzdWx0T3B0aW9uc1trZXldID0gYXdhaXQgb25PcHRpb25QYXJzZWQoa2V5LCB2YWx1ZSk7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHJlc3VsdE9wdGlvbnM7XG59XG5cbiJdfQ==
