'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (optionString) {
    return (0, _base2.default)(optionString, {
        optionsSeparator: OPTIONS_SEPARATOR,

        onOptionParsed(key, value) {
            return (0, _asyncToGenerator3.default)(function* () {
                if (!FILE_OPTION_NAMES.includes(key) || value.length > OS_MAX_PATH_LENGTH) return value;

                try {
                    yield (0, _promisifiedFunctions.stat)(value);
                } catch (error) {
                    DEBUG_LOGGER((0, _renderTemplate2.default)(_warningMessage2.default.cannotFindSSLCertFile, value, key, error.stack));

                    return value;
                }

                try {
                    return yield (0, _promisifiedFunctions.readFile)(value);
                } catch (error) {
                    throw new _runtime.GeneralError(_message2.default.cannotReadSSLCertFile, value, key, error.stack);
                }
            })();
        }
    });
};

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _runtime = require('../../errors/runtime');

var _promisifiedFunctions = require('../promisified-functions');

var _renderTemplate = require('../../utils/render-template');

var _renderTemplate2 = _interopRequireDefault(_renderTemplate);

var _message = require('../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _warningMessage = require('../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:utils:get-options:ssl');

const MAX_PATH_LENGTH = {
    'Linux': 4096,
    'Windows_NT': 260,
    'Darwin': 1024
};

const OS_MAX_PATH_LENGTH = MAX_PATH_LENGTH[_os2.default.type()];

const OPTIONS_SEPARATOR = ';';
const FILE_OPTION_NAMES = ['cert', 'key', 'pfx'];

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9nZXQtb3B0aW9ucy9zc2wuanMiXSwibmFtZXMiOlsib3B0aW9uU3RyaW5nIiwib3B0aW9uc1NlcGFyYXRvciIsIk9QVElPTlNfU0VQQVJBVE9SIiwib25PcHRpb25QYXJzZWQiLCJrZXkiLCJ2YWx1ZSIsIkZJTEVfT1BUSU9OX05BTUVTIiwiaW5jbHVkZXMiLCJsZW5ndGgiLCJPU19NQVhfUEFUSF9MRU5HVEgiLCJlcnJvciIsIkRFQlVHX0xPR0dFUiIsIldBUk5JTkdfTUVTU0FHRVMiLCJjYW5ub3RGaW5kU1NMQ2VydEZpbGUiLCJzdGFjayIsIkdlbmVyYWxFcnJvciIsIkVSUk9SX01FU1NBR0VTIiwiY2Fubm90UmVhZFNTTENlcnRGaWxlIiwiTUFYX1BBVEhfTEVOR1RIIiwib3MiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkF3QmUsVUFBVUEsWUFBVixFQUF3QjtBQUNuQyxXQUFPLG9CQUFlQSxZQUFmLEVBQTZCO0FBQ2hDQywwQkFBa0JDLGlCQURjOztBQUcxQkMsc0JBQU4sQ0FBc0JDLEdBQXRCLEVBQTJCQyxLQUEzQixFQUFrQztBQUFBO0FBQzlCLG9CQUFJLENBQUNDLGtCQUFrQkMsUUFBbEIsQ0FBMkJILEdBQTNCLENBQUQsSUFBb0NDLE1BQU1HLE1BQU4sR0FBZUMsa0JBQXZELEVBQ0ksT0FBT0osS0FBUDs7QUFFSixvQkFBSTtBQUNBLDBCQUFNLGdDQUFLQSxLQUFMLENBQU47QUFDSCxpQkFGRCxDQUdBLE9BQU9LLEtBQVAsRUFBYztBQUNWQyxpQ0FBYSw4QkFBZUMseUJBQWlCQyxxQkFBaEMsRUFBdURSLEtBQXZELEVBQThERCxHQUE5RCxFQUFtRU0sTUFBTUksS0FBekUsQ0FBYjs7QUFFQSwyQkFBT1QsS0FBUDtBQUNIOztBQUVELG9CQUFJO0FBQ0EsMkJBQU8sTUFBTSxvQ0FBU0EsS0FBVCxDQUFiO0FBQ0gsaUJBRkQsQ0FHQSxPQUFPSyxLQUFQLEVBQWM7QUFDViwwQkFBTSxJQUFJSyxxQkFBSixDQUFpQkMsa0JBQWVDLHFCQUFoQyxFQUF1RFosS0FBdkQsRUFBOERELEdBQTlELEVBQW1FTSxNQUFNSSxLQUF6RSxDQUFOO0FBQ0g7QUFsQjZCO0FBbUJqQztBQXRCK0IsS0FBN0IsQ0FBUDtBQXdCSCxDOztBQWpERDs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUdBLE1BQU1ILGVBQWUscUJBQU0sZ0NBQU4sQ0FBckI7O0FBRUEsTUFBTU8sa0JBQWtCO0FBQ3BCLGFBQWMsSUFETTtBQUVwQixrQkFBYyxHQUZNO0FBR3BCLGNBQWM7QUFITSxDQUF4Qjs7QUFNQSxNQUFNVCxxQkFBcUJTLGdCQUFnQkMsYUFBR0MsSUFBSCxFQUFoQixDQUEzQjs7QUFFQSxNQUFNbEIsb0JBQTZCLEdBQW5DO0FBQ0EsTUFBTUksb0JBQTZCLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsS0FBaEIsQ0FBbkMiLCJmaWxlIjoidXRpbHMvZ2V0LW9wdGlvbnMvc3NsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgYmFzZUdldE9wdGlvbnMgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IEdlbmVyYWxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IHN0YXQsIHJlYWRGaWxlIH0gZnJvbSAnLi4vcHJvbWlzaWZpZWQtZnVuY3Rpb25zJztcbmltcG9ydCByZW5kZXJUZW1wbGF0ZSBmcm9tICcuLi8uLi91dGlscy9yZW5kZXItdGVtcGxhdGUnO1xuaW1wb3J0IEVSUk9SX01FU1NBR0VTIGZyb20gJy4uLy4uL2Vycm9ycy9ydW50aW1lL21lc3NhZ2UnO1xuaW1wb3J0IFdBUk5JTkdfTUVTU0FHRVMgZnJvbSAnLi4vLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuXG5cbmNvbnN0IERFQlVHX0xPR0dFUiA9IGRlYnVnKCd0ZXN0Y2FmZTp1dGlsczpnZXQtb3B0aW9uczpzc2wnKTtcblxuY29uc3QgTUFYX1BBVEhfTEVOR1RIID0ge1xuICAgICdMaW51eCc6ICAgICAgNDA5NixcbiAgICAnV2luZG93c19OVCc6IDI2MCxcbiAgICAnRGFyd2luJzogICAgIDEwMjRcbn07XG5cbmNvbnN0IE9TX01BWF9QQVRIX0xFTkdUSCA9IE1BWF9QQVRIX0xFTkdUSFtvcy50eXBlKCldO1xuXG5jb25zdCBPUFRJT05TX1NFUEFSQVRPUiAgICAgICAgICA9ICc7JztcbmNvbnN0IEZJTEVfT1BUSU9OX05BTUVTICAgICAgICAgID0gWydjZXJ0JywgJ2tleScsICdwZngnXTtcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9uU3RyaW5nKSB7XG4gICAgcmV0dXJuIGJhc2VHZXRPcHRpb25zKG9wdGlvblN0cmluZywge1xuICAgICAgICBvcHRpb25zU2VwYXJhdG9yOiBPUFRJT05TX1NFUEFSQVRPUixcblxuICAgICAgICBhc3luYyBvbk9wdGlvblBhcnNlZCAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFGSUxFX09QVElPTl9OQU1FUy5pbmNsdWRlcyhrZXkpIHx8IHZhbHVlLmxlbmd0aCA+IE9TX01BWF9QQVRIX0xFTkdUSClcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc3RhdCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBERUJVR19MT0dHRVIocmVuZGVyVGVtcGxhdGUoV0FSTklOR19NRVNTQUdFUy5jYW5ub3RGaW5kU1NMQ2VydEZpbGUsIHZhbHVlLCBrZXksIGVycm9yLnN0YWNrKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlYWRGaWxlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoRVJST1JfTUVTU0FHRVMuY2Fubm90UmVhZFNTTENlcnRGaWxlLCB2YWx1ZSwga2V5LCBlcnJvci5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuIl19
