'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _lodash = require('lodash');

var _correctFilePath = require('../utils/correct-file-path');

var _correctFilePath2 = _interopRequireDefault(_correctFilePath);

var _escapeUserAgent = require('../utils/escape-user-agent');

var _escapeUserAgent2 = _interopRequireDefault(_escapeUserAgent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DATE_FORMAT = 'YYYY-MM-DD';
const TIME_FORMAT = 'HH-mm-ss';

const ERRORS_FOLDER = 'errors';

const PLACEHOLDERS = {
    DATE: '${DATE}',
    TIME: '${TIME}',
    TEST_INDEX: '${TEST_INDEX}',
    FILE_INDEX: '${FILE_INDEX}',
    QUARANTINE_ATTEMPT: '${QUARANTINE_ATTEMPT}',
    FIXTURE: '${FIXTURE}',
    TEST: '${TEST}',
    USERAGENT: '${USERAGENT}',
    BROWSER: '${BROWSER}',
    BROWSER_VERSION: '${BROWSER_VERSION}',
    OS: '${OS}',
    OS_VERSION: '${OS_VERSION}',
    TEST_ID: '${TEST_ID}',
    RUN_ID: '${RUN_ID}'
};

const DEFAULT_PATH_PATTERN_FOR_REPORT = `${PLACEHOLDERS.DATE}_${PLACEHOLDERS.TIME}\\${PLACEHOLDERS.TEST_ID}\\` + `${PLACEHOLDERS.RUN_ID}\\${PLACEHOLDERS.USERAGENT}\\${PLACEHOLDERS.FILE_INDEX}`;

const TEST_ID_TEMPLATE = data => data.testIndex ? `test-${data.testIndex}` : '';
const RUN_ID_TEMPLATE = data => data.quarantineAttempt ? `run-${data.quarantineAttempt}` : '';

class PathPattern {
    constructor(pattern, fileExtension, data) {
        this.pattern = this._ensurePattern(pattern);
        this.data = this._addDefaultFields(data);
        this.placeholderToDataMap = this._createPlaceholderToDataMap();
        this.fileExtension = fileExtension;
    }

    _ensurePattern(pattern) {
        if (pattern) return pattern;

        return DEFAULT_PATH_PATTERN_FOR_REPORT;
    }

    _addDefaultFields(data) {
        const defaultFields = {
            testId: TEST_ID_TEMPLATE(data),
            runId: RUN_ID_TEMPLATE(data),
            formattedDate: data.now.format(DATE_FORMAT),
            formattedTime: data.now.format(TIME_FORMAT),
            fileIndex: 1,
            errorFileIndex: 1
        };

        return (0, _assign2.default)({}, defaultFields, data);
    }

    _createPlaceholderToDataMap() {
        return {
            [PLACEHOLDERS.TEST_ID]: this.data.testId,
            [PLACEHOLDERS.RUN_ID]: this.data.runId,
            [PLACEHOLDERS.DATE]: this.data.formattedDate,
            [PLACEHOLDERS.TIME]: this.data.formattedTime,
            [PLACEHOLDERS.TEST_INDEX]: this.data.testIndex,
            [PLACEHOLDERS.QUARANTINE_ATTEMPT]: this.data.quarantineAttempt || 1,
            [PLACEHOLDERS.FIXTURE]: this.data.fixture,
            [PLACEHOLDERS.TEST]: this.data.test,
            [PLACEHOLDERS.FILE_INDEX]: forError => forError ? this.data.errorFileIndex : this.data.fileIndex,
            [PLACEHOLDERS.USERAGENT]: this.data.parsedUserAgent.toString(),
            [PLACEHOLDERS.BROWSER]: this.data.parsedUserAgent.family,
            [PLACEHOLDERS.BROWSER_VERSION]: this.data.parsedUserAgent.toVersion(),
            [PLACEHOLDERS.OS]: this.data.parsedUserAgent.os.family,
            [PLACEHOLDERS.OS_VERSION]: this.data.parsedUserAgent.os.toVersion()
        };
    }

    static _buildPath(pattern, placeholderToDataMap, forError) {
        let resultFilePath = pattern;

        for (const placeholder in placeholderToDataMap) {
            const findPlaceholderRegExp = new RegExp((0, _lodash.escapeRegExp)(placeholder), 'g');

            resultFilePath = resultFilePath.replace(findPlaceholderRegExp, () => {
                if (placeholder === PLACEHOLDERS.FILE_INDEX) {
                    const getFileIndexFn = placeholderToDataMap[placeholder];
                    let result = getFileIndexFn(forError);

                    if (forError) result = `${ERRORS_FOLDER}\\${result}`;

                    return result;
                } else if (placeholder === PLACEHOLDERS.USERAGENT) {
                    const userAgent = placeholderToDataMap[placeholder];

                    return (0, _escapeUserAgent2.default)(userAgent);
                }

                return placeholderToDataMap[placeholder];
            });
        }

        return resultFilePath;
    }

    getPath(forError) {
        const path = PathPattern._buildPath(this.pattern, this.placeholderToDataMap, forError);

        return (0, _correctFilePath2.default)(path, this.fileExtension);
    }

    // For testing purposes
    static get PLACEHOLDERS() {
        return PLACEHOLDERS;
    }
}
exports.default = PathPattern;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
